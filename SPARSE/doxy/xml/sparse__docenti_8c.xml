<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="sparse__docenti_8c" kind="file" language="C++">
    <compoundname>sparse_docenti.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="sparse_8h" local="yes">sparse.h</includes>
    <incdepgraph>
      <node id="78">
        <label>sparse.h</label>
        <link refid="sparse_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>stdlib.h</label>
      </node>
      <node id="75">
        <label>sparse_docenti.c</label>
        <link refid="sparse_docenti.c"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sparse__docenti_8c_1aacd91b4066e949852144fb80cf11420b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_elem_r</definition>
        <argsstring>(FILE *f, elem_t *p)</argsstring>
        <name>print_elem_r</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="sparse_8h_1a14aec81bdea9c2d34b666b7157117387" kindref="member">elem_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sparse_docenti.c" line="10" column="1" bodyfile="sparse_docenti.c" bodystart="10" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="sparse__docenti_8c_1a908b6cb8261c0131e8c71d842a4381c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_smat</definition>
        <argsstring>(FILE *f, smatrix_t *a)</argsstring>
        <name>print_smat</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structsmatrix__t" kindref="compound">smatrix_t</ref> *</type>
          <declname>l</declname>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stampa la matrice in forma canonica (FORNITA DAI DOCENTI)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>putatore alla matrice da stampare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al file su cui scrivere </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sparse_docenti.c" line="17" column="1" bodyfile="sparse_docenti.c" bodystart="17" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>funzioni print smat implementata dai docenti </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Docenti Sol Lab 2015/2016 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sparse_8h" kindref="compound">sparse.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_elem_r(FILE<sp/>*<sp/>f,<sp/><ref refid="structelem" kindref="compound">elem_t</ref>*<sp/>p)<sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>==<sp/>NULL<sp/>)<sp/>return<sp/>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%d,%f&gt;&quot;</highlight><highlight class="normal">,p-&gt;<ref refid="structelem_1aca409f3a7c1c9621b262a230c78ef37b" kindref="member">col</ref>,p-&gt;<ref refid="structelem_1a52a0b099052bdf7611aa32acdb3f5449" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>print_elem_r(f,p-&gt;<ref refid="structelem_1ab9cf5c2e1c9a0ec2938275b90d39d5ca" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sparse__docenti_8c_1a908b6cb8261c0131e8c71d842a4381c1" kindref="member">print_smat</ref><sp/>(FILE<sp/>*<sp/>f,<sp/><ref refid="structsmatrix__t" kindref="compound">smatrix_t</ref><sp/>*<sp/>a)<sp/>{<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>==<sp/>NULL<sp/>||<sp/>a<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<sp/>a-&gt;<ref refid="structsmatrix__t_1ae0b8f31ddab7ed23ca14a46758291f37" kindref="member">nrow</ref><sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;<ref refid="structsmatrix__t_1aa60ccb45be474ec81f6daab4fcdab2c4" kindref="member">mat</ref>[i]!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,</highlight><highlight class="stringliteral">&quot;%d:<sp/>&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_elem_r(f,a-&gt;<ref refid="structsmatrix__t_1aa60ccb45be474ec81f6daab4fcdab2c4" kindref="member">mat</ref>[i]);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>fprintf(f,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/></highlight></codeline>
    </programlisting>
    <location file="sparse_docenti.c"/>
  </compounddef>
</doxygen>
