<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="icl__hash_8c" kind="file" language="C++">
    <compoundname>icl_hash.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="icl__hash_8h" local="yes">icl_hash.h</includes>
    <includes local="no">limits.h</includes>
    <incdepgraph>
      <node id="73">
        <label>assert.h</label>
      </node>
      <node id="70">
        <label>stdlib.h</label>
      </node>
      <node id="69">
        <label>icl_hash.c</label>
        <link refid="icl_hash.c"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>icl_hash.h</label>
        <link refid="icl__hash_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>limits.h</label>
      </node>
      <node id="72">
        <label>string.h</label>
      </node>
      <node id="71">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="icl__hash_8c_1a2d10e257c22cc1e2f5b4ba85836ea6e5" prot="public" static="no">
        <name>BITS_IN_int</name>
        <initializer>( sizeof(int) * CHAR_BIT )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="24" column="9" bodyfile="icl_hash.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="icl__hash_8c_1a733032d4ad1dbc4241e6484ee43c5503" prot="public" static="no">
        <name>THREE_QUARTERS</name>
        <initializer>((int) ((BITS_IN_int * 3) / 4))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="25" column="9" bodyfile="icl_hash.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="icl__hash_8c_1a884e9ecda77996d026dce1f76dbd1cd8" prot="public" static="no">
        <name>ONE_EIGHTH</name>
        <initializer>((int) (BITS_IN_int / 8))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="26" column="9" bodyfile="icl_hash.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="icl__hash_8c_1a55bd7253449b589fcbbe9cdb09838150" prot="public" static="no">
        <name>HIGH_BITS</name>
        <initializer>( ~((unsigned int)(~0) &gt;&gt; ONE_EIGHTH ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="27" column="9" bodyfile="icl_hash.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="icl__hash_8c_1a6a10ee6275ca507d09fd47a719767e3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int hash_pjw</definition>
        <argsstring>(void *key)</argsstring>
        <name>hash_pjw</name>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A simple string hash.</para><para>An adaptation of Peter Weinberger&apos;s (PJW) generic hashing algorithm based on Allen Holub&apos;s version. Accepts a pointer to a datum to be hashed and returns an unsigned integer. From: Keith Seymour&apos;s proxy library code</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the string to be hashed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="41" column="1" bodyfile="icl_hash.c" bodystart="41" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1af73feac3dabb92903ba78109da604864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int string_compare</definition>
        <argsstring>(void *a, void *b)</argsstring>
        <name>string_compare</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="56" column="1" bodyfile="icl_hash.c" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a7dd8c07b7cf001deceaf83273c08cb10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
        <definition>icl_hash_t* icl_hash_create</definition>
        <argsstring>(int nbuckets, unsigned int(*hash_function)(void *), int(*hash_key_compare)(void *, void *))</argsstring>
        <name>icl_hash_create</name>
        <param>
          <type>int</type>
          <declname>nbuckets</declname>
        </param>
        <param>
          <type>unsigned int(*)(void *)</type>
          <declname>hash_function</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>hash_key_compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new hash table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nbuckets</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> number of buckets to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hash_function</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to the hashing function to be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hash_key_compare</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to the hash key comparison function to be used</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to new hash table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="73" column="1" bodyfile="icl_hash.c" bodystart="73" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a13a0f184a9dc3dfa3a68445101370e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* icl_hash_find</definition>
        <argsstring>(icl_hash_t *ht, void *key)</argsstring>
        <name>icl_hash_find</name>
        <param>
          <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for an entry in a hash table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the hash table to be searched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the key of the item to search for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the data corresponding to the key. If the key was not found, returns NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="106" column="1" bodyfile="icl_hash.c" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a650b9755a4efce9df3093602ddb40414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref> *</type>
        <definition>icl_entry_t* icl_hash_insert</definition>
        <argsstring>(icl_hash_t *ht, void *key, void *data)</argsstring>
        <name>icl_hash_insert</name>
        <param>
          <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert an item into the hash table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the key of the new item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to the new item&apos;s data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new item. Returns NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="133" column="1" bodyfile="icl_hash.c" bodystart="133" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a18e3ea6181d8c736206939def95da02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref> *</type>
        <definition>icl_entry_t* icl_hash_update_insert</definition>
        <argsstring>(icl_hash_t *ht, void *key, void *data, void **olddata)</argsstring>
        <name>icl_hash_update_insert</name>
        <param>
          <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>olddata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace entry in hash table with the given entry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the key of the new item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to the new item&apos;s data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olddata</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to the old item&apos;s data (set upon return)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new item. Returns NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="172" column="1" bodyfile="icl_hash.c" bodystart="172" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a9a61a09d5f70d66cc668565645aa3e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int icl_hash_delete</definition>
        <argsstring>(icl_hash_t *ht, void *key, void(*free_key)(void *), void(*free_data)(void *))</argsstring>
        <name>icl_hash_delete</name>
        <param>
          <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_key</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free one hash table entry located by key (key and data are freed using functions).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the hash table to be freed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the key of the new item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to function that frees the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to function that frees the data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="223" column="1" bodyfile="icl_hash.c" bodystart="223" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a4644f0e1c6aecfefd5ab9c378695d24a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int icl_hash_destroy</definition>
        <argsstring>(icl_hash_t *ht, void(*free_key)(void *), void(*free_data)(void *))</argsstring>
        <name>icl_hash_destroy</name>
        <param>
          <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_key</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free hash table structures (key and data are freed using functions).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the hash table to be freed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_key</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to function that frees the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> pointer to function that frees the data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="261" column="1" bodyfile="icl_hash.c" bodystart="261" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="icl__hash_8c_1a0f2c0d444320e2847ecaa8efbd9ff730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int icl_hash_dump</definition>
        <argsstring>(FILE *stream, icl_hash_t *ht)</argsstring>
        <name>icl_hash_dump</name>
        <param>
          <type>FILE *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump the hash table&apos;s contents to the given file pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the file to which the hash table should be dumped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/> the hash table to be dumped</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="icl_hash.c" line="295" column="1" bodyfile="icl_hash.c" bodystart="295" bodyend="312"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Dependency free hash table implementation.</para><para>This simple hash table implementation should be easy to drop into any other peice of code, it does not depend on anything else :-)</para><para><simplesect kind="author"><para>Jakub Kurzak </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="comment">/*<sp/>$Id:<sp/>icl_hash.c<sp/>2838<sp/>2011-11-22<sp/>04:25:02Z<sp/>mfaverge<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>$UTK_Copyright:<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="icl__hash_8h" kindref="compound">icl_hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BITS_IN_int<sp/><sp/><sp/><sp/><sp/>(<sp/>sizeof(int)<sp/>*<sp/>CHAR_BIT<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THREE_QUARTERS<sp/><sp/>((int)<sp/>((BITS_IN_int<sp/>*<sp/>3)<sp/>/<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ONE_EIGHTH<sp/><sp/><sp/><sp/><sp/><sp/>((int)<sp/>(BITS_IN_int<sp/>/<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIGH_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>~((unsigned<sp/>int)(~0)<sp/>&gt;&gt;<sp/>ONE_EIGHTH<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">hash_pjw(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*datum<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_value,<sp/>i;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!datum)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(hash_value<sp/>=<sp/>0;<sp/>*datum;<sp/>++datum)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_value<sp/>=<sp/>(hash_value<sp/>&lt;&lt;<sp/>ONE_EIGHTH)<sp/>+<sp/>*datum;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>hash_value<sp/>&amp;<sp/>HIGH_BITS)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_value<sp/>=<sp/>(hash_value<sp/>^<sp/>(i<sp/>&gt;&gt;<sp/>THREE_QUARTERS))<sp/>&amp;<sp/>~HIGH_BITS;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hash_value);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>string_compare(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b)<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(strcmp(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)a,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)b<sp/>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="icl__hash_8c_1a7dd8c07b7cf001deceaf83273c08cb10" kindref="member">icl_hash_create</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbuckets,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*hash_function)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*hash_key_compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*ht;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ht<sp/>=<sp/>(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref>));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;nentries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;buckets<sp/>=<sp/>(<ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>**)malloc(nbuckets<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>*));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht-&gt;buckets)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;nbuckets<sp/>=<sp/>nbuckets;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;ht-&gt;nbuckets;i++)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;buckets[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;hash_function<sp/>=<sp/>hash_function<sp/>?<sp/>hash_function<sp/>:<sp/>hash_pjw;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;hash_key_compare<sp/>=<sp/>hash_key_compare<sp/>?<sp/>hash_key_compare<sp/>:<sp/>string_compare;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ht;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="icl__hash_8c_1a13a0f184a9dc3dfa3a68445101370e32" kindref="member">icl_hash_find</ref>(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*ht,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>*<sp/>curr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht<sp/>||<sp/>!key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>(*<sp/>ht-&gt;hash_function)(key)<sp/>%<sp/>ht-&gt;nbuckets;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curr=ht-&gt;buckets[hash_val];<sp/>curr<sp/>!=<sp/>NULL;<sp/>curr=curr-&gt;next)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ht-&gt;hash_key_compare(curr-&gt;key,<sp/>key))</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(curr-&gt;data);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="icl__hash_8c_1a650b9755a4efce9df3093602ddb40414" kindref="member">icl_hash_insert</ref>(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*ht,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structdata" kindref="compound">data</ref>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*curr;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht<sp/>||<sp/>!key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>(*<sp/>ht-&gt;hash_function)(key)<sp/>%<sp/>ht-&gt;nbuckets;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curr=ht-&gt;buckets[hash_val];<sp/>curr<sp/>!=<sp/>NULL;<sp/>curr=curr-&gt;next)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ht-&gt;hash_key_compare(curr-&gt;key,<sp/>key))</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>already<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>key<sp/>was<sp/>not<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>(<ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!curr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>curr-&gt;key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>curr-&gt;data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>curr-&gt;next<sp/>=<sp/>ht-&gt;buckets[hash_val];<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>at<sp/>start<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;buckets[hash_val]<sp/>=<sp/>curr;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;nentries++;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curr;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><ref refid="icl__hash_8c_1a18e3ea6181d8c736206939def95da02a" kindref="member">icl_hash_update_insert</ref>(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*ht,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**olddata)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*curr,<sp/>*prev;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht<sp/>||<sp/>!key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>(*<sp/>ht-&gt;hash_function)(key)<sp/>%<sp/>ht-&gt;nbuckets;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scan<sp/>bucket[hash_val]<sp/>for<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(prev=NULL,curr=ht-&gt;buckets[hash_val];<sp/>curr<sp/>!=<sp/>NULL;<sp/>prev=curr,<sp/>curr=curr-&gt;next)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>key<sp/>found,<sp/>remove<sp/>node<sp/>from<sp/>list,<sp/>free<sp/>old<sp/>key,<sp/>and<sp/>setup<sp/>olddata<sp/>for<sp/>the<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ht-&gt;hash_key_compare(curr-&gt;key,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(olddata<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*olddata<sp/>=<sp/>curr-&gt;data;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(curr-&gt;key);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;buckets[hash_val]<sp/>=<sp/>curr-&gt;next;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>curr-&gt;next;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>key<sp/>was<sp/>either<sp/>not<sp/>found,<sp/>or<sp/>found-and-removed,<sp/>create<sp/>and<sp/>prepend<sp/>new<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>(<ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref>));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curr<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>curr-&gt;key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>curr-&gt;data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>curr-&gt;next<sp/>=<sp/>ht-&gt;buckets[hash_val];<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>at<sp/>start<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;buckets[hash_val]<sp/>=<sp/>curr;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>ht-&gt;nentries++;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(olddata!=NULL<sp/>&amp;&amp;<sp/>*olddata!=NULL)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*olddata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curr;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="icl__hash_8c_1a9a61a09d5f70d66cc668565645aa3e88" kindref="member">icl_hash_delete</ref>(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*ht,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_key)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_data)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*curr,<sp/>*prev;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_val;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht<sp/>||<sp/>!key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_val<sp/>=<sp/>(*<sp/>ht-&gt;hash_function)(key)<sp/>%<sp/>ht-&gt;nbuckets;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curr=ht-&gt;buckets[hash_val];<sp/>curr<sp/>!=<sp/>NULL;<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ht-&gt;hash_key_compare(curr-&gt;key,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;buckets[hash_val]<sp/>=<sp/>curr-&gt;next;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>curr-&gt;next;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*free_key<sp/>&amp;&amp;<sp/>curr-&gt;key)<sp/>(*free_key)(curr-&gt;key);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*free_data<sp/>&amp;&amp;<sp/>curr-&gt;data)<sp/>(*free_data)(curr-&gt;data);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;nentries++;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(curr);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>curr;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr<sp/>=<sp/>curr-&gt;next;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="icl__hash_8c_1a4644f0e1c6aecfefd5ab9c378695d24a" kindref="member">icl_hash_destroy</ref>(<ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref><sp/>*ht,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_key)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_data)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*bucket,<sp/>*curr,<sp/>*next;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;ht-&gt;nbuckets;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/>ht-&gt;buckets[i];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curr=bucket;<sp/>curr!=NULL;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next=curr-&gt;next;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*free_key<sp/>&amp;&amp;<sp/>curr-&gt;key)<sp/>(*free_key)(curr-&gt;key);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*free_data<sp/>&amp;&amp;<sp/>curr-&gt;data)<sp/>(*free_data)(curr-&gt;data);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(curr);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr=next;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht-&gt;buckets)<sp/>free(ht-&gt;buckets);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht)<sp/>free(ht);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="icl__hash_8c_1a0f2c0d444320e2847ecaa8efbd9ff730" kindref="member">icl_hash_dump</ref>(FILE*<sp/>stream,<sp/><ref refid="structicl__hash__s" kindref="compound">icl_hash_t</ref>*<sp/>ht)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structicl__entry__s" kindref="compound">icl_entry_t</ref><sp/>*bucket,<sp/>*curr;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;ht-&gt;nbuckets;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/>ht-&gt;buckets[i];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(curr=bucket;<sp/>curr!=NULL;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curr-&gt;key)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stream,<sp/></highlight><highlight class="stringliteral">&quot;icl_hash_dump:<sp/>%s:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)curr-&gt;key,<sp/>curr-&gt;data);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr=curr-&gt;next;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="icl_hash.c"/>
  </compounddef>
</doxygen>
